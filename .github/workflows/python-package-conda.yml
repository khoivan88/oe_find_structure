name: Python Package using Conda

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-linux:
    # The type of runner that the job will run on
#     runs-on: ubuntu-latest
    runs-on: ${{ matrix.os }}
    
    strategy:
      max-parallel: 5
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
#         os: [ubuntu-latest]
        python-version: [3.6, 3.7, 3.8, 3.x]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Display Python version
      run: python -c "import sys; print(sys.version)"
    
    - name: Cache pip Ubuntu
      uses: actions/cache@v2
      if: startsWith(runner.os, 'Linux')
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Cache pip MacOS
      uses: actions/cache@v2
      if: startsWith(runner.os, 'macOS')
      with:
        path: ~/Library/Caches/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Cache pip Windows
      uses: actions/cache@v2
      if: startsWith(runner.os, 'Windows')
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
  
    - name: Install dependencies with conda
      if: startsWith(runner.os, 'Linux')
      run: |
        # $CONDA is an environment variable pointing to the root of the miniconda directory
        $CONDA/bin/conda env update --file environment.yml --name base
        
    - name: Install dependencies with pip
      if: startsWith(runner.os, 'macOS') or startsWith(runner.os, 'Windows')
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Lint with flake8
      run: |
        $CONDA/bin/conda install flake8
        # stop the build if there are Python syntax errors or undefined names
        $CONDA/bin/flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        $CONDA/bin/flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        conda install pytest pytest-cov
        $CONDA/bin/python -m pytest --cov=./ --cov-report=xml tests

    - name: Upload coverage to codecov.io
      uses: codecov/codecov-action@v1
      if: startsWith(runner.os, 'Linux') && matrix.python-version == 3.8
      with:
        # CODECOV_TOKEN is repo-specific and it must be copied from codecov.io for the repository
        # and stored as a secret in GitHub's repository Settings > Secrets. CODECOV_TOKEN does not
        # need to be stored in codecov.io as a secret even though codecov.io provides that feature.
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml  # file where pytest-cov will store results
        fail_ci_if_error: false
